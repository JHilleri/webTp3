{
  "name": "Webtp3",
  "tagline": "",
  "body": "![socket.io background](socketio.png)\r\n# Introduction\r\n\r\nSocket.io est une bibliothèque pour gérer des communication temps-réel entre un serveur node.js et des clients web ( ou C++ ).\r\n\r\nCette bibliothèque fouit plusieurs fonctionnalités intéressantes :\r\n- compatibilité avec les différent navigateur, socket.io utilise des web-socket quand le navigateur le supporte mais peut utiliser d'autres technologies pour assurer la compatibilité avec les vieux navigateurs.\r\n- programmation événementielle.\r\n- transmission de données json ou binaire.\r\n- compression des données.\r\n\r\n# Utilisation\r\n\r\n## Coté serveur\r\n\r\n### Installation\r\n\r\nSur le serveur node.js l'installation ce fait simplement avec le gestionnaire de packages npm.\r\n\r\n```\r\nnpm install socket.io\r\n```\r\n\r\n### charger la bibliothèque\r\n\r\nPour charger socket.io sur le serveur il suffit d'utiliser la fonction require.\r\n\r\n```js\r\nvar io = require('socket.io')();\r\n```\r\n\r\n### gestion des connexions\r\n\r\n```js\r\nio.on('connection', function(socket){\r\n// code a exécuter lors des connexions\r\n});\r\n```\r\n\r\n### gestion des évènements\r\n\r\n```js\r\nsocket.on($nomEvenement, function () {\r\n//traitement de l'évènement\r\n});\r\n```\r\n\r\nGénéralement les évènement sont définit lors de la connexion du client.\r\n\r\n### écouter les connexion\r\n\r\nPour écouter les connexions sur le port $port il faut utiliser la méthode listen.\r\n- pour une utilisation de socket.io seul\r\n```js\r\nvar io = require('socket.io')();\r\n// ...\r\nio.listen($port);\r\n```\r\n- pour une utilisation de socket.io avec express\r\n```js\r\nvar app = require('express')();\r\nvar server = require('http').createServer(app);\r\nvar io = require('socket.io')(server);\r\n// ...\r\nserver.listen($port, $ip)\r\n```\r\n\r\nLes ports et addresses IP de l'hébergeur peuvent être récupéré avec process.env.PORT et process.env.IP.\r\n\r\n### envoyer un évènement\r\n\r\nLes évènements sont utilisé pour communiquer entre le serveur et les clients, les évènements sont identifié par des noms et transmettent des objets.\r\n- envoyer a tout les clients connectés\r\n```js\r\nio.emit($nomEvenement, $objetAEnvoyer);\r\n```\r\n\r\n- envoyer a un client\r\n```js\r\nsocket.emit($nomEvenement, $objetAEnvoyer);\r\n```\r\n\r\n## client web\r\n\r\n### Chargement du scripte\r\n\r\nPour utiliser socket.io coté client il suffit de charger dans la page le script fournit automatiquement par le module coté serveur.\r\n\r\n```html\r\n<script src=\"/socket.io/socket.io.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\n### creation d'un socket\r\n\r\n```js\r\nvar socket = io();\r\n```\r\n\r\n### gestion des évènements\r\n\r\n```js\r\nsocket.on($nomEvenement, function(objetRecut){\r\n// traitement de l'evenement \r\n};\r\n```\r\n\r\n### émission d'évènements\r\n```js\r\nsocket.emit($nomEvenement, $objetAEnvoyer);\r\n```\r\n# Exemples\r\n## Un chat avec socket.io\r\n\r\nPour cet exemple on vas utiliser socket.io avec le framework express.\r\n\r\n### 1. installation des packages\r\n```\r\nnpm install express\r\nnpm install socket.io\r\n```\r\n### 2. code serveur\r\n```js\r\nvar express = require('express');\r\nvar app = express();\r\nvar http = require('http').Server(app);\r\nvar io = require('socket.io')(http);\r\n\r\napp.use(express.static(__dirname + '/www/'));\r\n\r\nhttp.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function () {\r\n  console.log('listening');\r\n});\r\n\r\nio.on('connection', function (socket) {\r\n  console.log('a user connected');\r\n  socket.on('disconnect', function () {\r\n    console.log('user disconnected');\r\n  });\r\n\r\n  socket.on(\"message\", function (message) {\r\n    if (message.text !== \"\") {\r\n      io.emit(\"message\", message);\r\n      console.log(message);\r\n    }\r\n  });\r\n});\r\n```\r\n### 3. code client\r\n- index.html\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Mon premier chat avec socket.io</title>\r\n    <script src=\"/socket.io/socket.io.js\" type=\"text/javascript\"></script>\r\n    <script src=\"/js/jquery-3.1.1.js\" type=\"text/javascript\"></script>\r\n    <script src=\"/js/myChat.js\" type=\"text/javascript\"></script>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">\r\n</head>\r\n<body onload=\"start()\">\r\n    <textarea readonly id=\"messageOutput\"></textarea>\r\n    <form action=\"\" id=\"messageForm\">\r\n        <input id=\"userPseudo\" autocomplete=\"off\" placeholder=\"pseudo\"/>\r\n        <input id=\"messageInput\" autocomplete=\"off\" placeholder=\"message\"/>\r\n        <button id=\"sendMessage\">envoyer</button>\r\n    </form>\r\n</body>\r\n</html>\r\n```\r\n- myChat.js\r\n```js\r\nfunction start()\r\n{\r\n    var socket = io();\r\n\r\n    $(\"#messageForm\").submit(function(){\r\n        socket.emit(\"message\", {pseudo:$(\"#userPseudo\").val(),text:$(\"#messageInput\").val()});\r\n        $(\"#messageInput\").val(\"\");\r\n        return false;\r\n    });\r\n\r\n    socket.on(\"message\", function(message){\r\n        $(\"#messageOutput\").val($(\"#messageOutput\").val() + message.pseudo + \" : \" + message.text + \"\\n\");\r\n    });\r\n}\r\n```\r\n![aperçu de l'exemple](./exemple1.png)\r\n\r\n[sources de l'exemple](https://github.com/JHilleri/socket.ioExemple1), \r\n[demonstration](https://socket-io-exemple.herokuapp.com/)\r\n# Sources\r\n- [socket.io](http://socket.io/)\r\n- [developpez.com](http://atinux.developpez.com/tutoriels/javascript/debuter-avec-socket-io/)\r\n- [openclassrooms](https://openclassrooms.com/courses/des-applications-ultra-rapides-avec-node-js)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}